/****************************************************************************************
* Description: Oracle for Triangle Finding Problem 
*
* Author: Chen-Fu Chiang @ USherbrooke 
* 
* Implementation of the Oracle for the triangle finding algorithm specified in the 
* Quantum Computer Science Program @ Government Furnished Information document 
*
* Document date: June 20, 2011
* Document Version: 1.0.0
* Document Reversion number: 188
*
* Implementation date: 2012
*****************************************************************************************/
// Commonly used gates
gate H(qreg q[1]);
gate X(qreg q[1]);
gate Z(qreg q[1]);
gate S(qreg q[1]); 
gate T(qreg q[1]); 
gate Tdag(qreg q[1]); 
gate Sdag(qreg q[1]); 
gate CNOT(qreg target[1], qreg control[1]);


// Global variables 
/**************************************************************
#define n  15
#define N  32768	// N = 2 ^ n
#define r  9  		// r = (3/5)n
#define R  512		// R = 2 ^ r
#define RR1 130816	// RR1 = R(R-1)/2
#define rbar  6		// rbar = (2/5)n 
#define Rbar  64	// Rbar = 2^rbar
#define CTR  11		// CRT = 2*rbar - 1 
#define tm 64 		// Quantum walk iterations (floor of N/R)
#define tw 22		// Quantum walk step iterations (floor of sqrt(R))
#define tg  142 	// Grover iteration (pi/4)* (Sqrt(N))
#define tbarm 8		// R/Rbar
#define tbarw 22	// (floor of sqrt(R))
***************************************************************/

/**************************************************************
*	Data Structures 
**************************************************************/

/****
struct quInt   
{ qreg reg[31];	 //TODO: easier to use array (static) for since it of fixed size
};
****/

/****
struct quInt2   
{ qreg reg[2];	 //TODO: easier to use array (static) for since it of fixed size
};
****/

/****
struct quInt3   
{ qreg reg[3];	 //TODO: easier to use array (static) for since it of fixed size
};
****/

/****
struct quInt5   
{ qreg reg[5];	 //TODO: easier to use array (static) for since it of fixed size
};
****/

/**************************************************************
* 	Useful Modules
***************************************************************/ 
// Commonly used gates
gate H(qreg q);
gate X(qreg q);
gate Z(qreg q);
gate CNOT(qreg target,qreg control);



/**********************************************************
*  The following are defined in the the TriangleFinding 
*  Problem Algorithm Program and will be used in Oracle
***********************************************************/ 

module Toffoli(qreg target[1], qreg ctr2[1], qreg ctr1[1]) 
{
	H(target[0]); 
	CNOT(target[0],ctr2[0]); 
	Tdag(target[0]); 
	CNOT(target[0], ctr1[0]); 
	T(target[0]); 
	CNOT(target[0], ctr2[0]); 
	Tdag(target[0]); 
	CNOT(target[0], ctr1[0]); 
	Tdag(ctr2[0]); 
	T(target[0]); 
	CNOT(ctr2[0], ctr1[0]); 
	H(target[0]); 
	Tdag(ctr2[0]); 
	CNOT(ctr2[0], ctr1[0]); 
	T(ctr1[0]); 
	S(ctr2[0]); 
}

module ONE(qreg reg[1])           
{
	qreg dreg[1]; 
	CNOT(dreg[0], reg[0]); 
	X(dreg[0]);
	CNOT(reg[0], dreg[0]);   
}

module ctrONE(qreg reg[1], qreg test[1])           
{
	qreg dreg[1]; 
	Toffoli(dreg[0], reg[0], test[0]); 
	CNOT(dreg[0], test[0]);
	Toffoli(reg[0], dreg[0], test[0]);   
}
 

module ZERO(qreg reg[1])
{
	qreg dreg[1];  		
	CNOT(dreg[0], reg[0]); 
	CNOT(reg[0], dreg[0]); 
	
}

/*******************************************************
* The following modules are used in this Oracle call 
********************************************************/ 

module ctrZERO(qreg reg[1], qreg test[1])
{
	qreg dreg[1];  		
	Toffoli(dreg[0], reg[0], test[0]); 
	Toffoli(reg[0], dreg[0], test[0]); 
}


module ctrbitADD(qreg x[1], qreg y[1], qreg ret[1], qreg test[1])
{
	qreg ctr[2]; 
	
	CNOT(ctr[0], x[0]); 
	CNOT(ctr[0], y[0]); 
	X(ctr[0]); 
	
	Toffoli(ctr[1], ctr[0], test[0]); 
	ctrZERO(ret[0], ctr[1]);  
	
	X(ctr[1]); 
	ctrONE(ret[0], ctr[1]);
	
	//uncompute
	X(ctr[1]);
	Toffoli(ctr[1], ctr[0], test[0]); 
	X(ctr[0]); 
	CNOT(ctr[0], x[0]); 
	CNOT(ctr[0], y[0]);  
} 

module bitADD(qreg x[1], qreg y[1], qreg ret[1])
{
	qreg ctr[1]; 
	
	CNOT(ctr[0], x[0]); 
	CNOT(ctr[0], y[0]); 
	X(ctr[0]); 
	
	// depreciated 
	//if((evalueToBool(x) && evaluateToBool(y)) || (!evaluateToBool(x) && !evaluateToBool(y)))
	
	ctrZERO(ret[0], ctr[0]);  
	X(ctr[0]); 
	ctrONE(ret[0], ctr[0]);
	
	//uncompute
	CNOT(ctr[0], x[0]); 
	CNOT(ctr[0], y[0]);  
} 

 
module ctrbitAND(qreg x[1], qreg y[1], qreg ret[1], qreg test[1])
{
	qreg ctr[2];
	Toffoli(ctr[0], x[0], y[0]); 
	
	// decpreciated
	//if (evaluateToBool(x) && evaluateToBool(y))
	
	Toffoli(ctr[1], ctr[0], test[0]); 
	ctrONE(ret[0], ctr[1]); 
	X(ctr[1]); 
	ctrZERO(ret[0], ctr[1]); 
	
	//uncompute
	X(ctr[1]); 
	Toffoli(ctr[1], ctr[0], test[0]); 
	Toffoli(ctr[0], x[0], y[0]);
} 

module bitAND(qreg x[1], qreg y[1], qreg ret[1])
{
	qreg ctr[1];
	Toffoli(ctr[0], x[0], y[0]); 
	
	// decpreciated
	//if (evaluateToBool(x) && evaluateToBool(y))
	ctrONE(ret[0], ctr[0]); 
	X(ctr[0]); 
	ctrZERO(ret[0], ctr[0]); 
	
	//uncompute
	X(ctr[0]); 
	
	Toffoli(ctr[0], x[0], y[0]);
} 
 
 
// depreciated 
boolean module equalqubit(qreg x[1], qreg y[1])
{
	qreg a[1]; 
	qreg b[1]; 
	
	CNOT(a, x);
	CNOT(b, y); 
	CNOT(a,b); 
	
	return !evaluateToBool(a); 
}
 
 
module equalquInt2(quInt2 x,  quInt2 y, qreg test[1])
{
	int i = 0; 
	qreg dum[2]; 
	
	for(i = 0; i < 2; i++)
	{	
		Toffoli(dum[i], x.reg[i], y.reg[i]);  
	}
	
	Toffoli(test[0], dum[1], dum[0]); 
	
	//uncompute 
	for(i = 1; i > -1; i++)
	{	
		Toffoli(dum[i], x.reg[i], y.reg[i]);  
	}
}

//depreciated 
boolean module equalquInt2(quInt2 x,  quInt2 y)
{
	int i = 0; 

	
	for(i = 0; i < 2; i++)
	{	
		if(!equalqubit(x.reg[i], y.reg[i]))
			return false; 
	}
	return true; 
}


/***********************************************
*Evaluate the qubit value in terms of boolean
************************************************/
boolean module evaluateToBool(qreg reg[1])
{
	int ret = 0; 
	qreg dreg[1]; 
	
	CNOT(dreg[0], reg[0]); 
	measX(dreg[0], ret); 
	
	if(ret == 1)
		return true; 
		
	else
		return false; 
}
 
/**************************************************************
*	Algorithm O-1: ORACLE
*	Para: u a quNode of size n 
*	      v a quNode of size n 
*		  edge a qreg; is 1 when u and v are connected		
*	      Return:    
*	Comment: In Triangle Finding problem pseudo code section, 
* 	the function is named EdgeORACLE and only takes two parameter.
*	It should take 3 parameters. 
**************************************************************/
module EdgeORACLE(quNode u, quNode v, qreg edge[1])
{
	quInt uint; 
	quInt vint; 
	quInt u17; 
	quInt v17; 
	quInt2 u3; 
	quInt2 v3; 
	
	qreg t[1]; 					
	qreg uF[1]; 
	qreg vF[1];
	qreg uH[1]; 
	qreg vH[1]; 
	qreg uvH[1]; 
	qreg uv3[1];
	qreg uvF[1]; 
	qreg equalbit[2]; 
	
	/**************************************
	* This array is basically used to do the
	* statement flow control 
	* location 0 is for "NOT t[0]"
	***************************************/ 
	qreg ctrcentr[n]; 
	
	int hn = N/2; 
	
	// the initial value of if two nodes are connected should be zero before asking the Oracle 
	ZERO(edge[0]); 
	
	ConvertNode(u, uint, hn); 
	ConvertNode(v, vint, hn); 
	TestEqual(uint, vint, t); 
		
		// if two nodes are equal, they are connected				
		ctrZERO(edge[0], t[0]);		 
	
		// the following takes place when they are not equal 
		CNOT(ctrcentr[0], t[0]);
		X(ctrcentr[0]);  
	
		
		/** when t[0] is 0, then we do the following ***/ 
		ctrPow17(unit, u17,ctrcentr[0]); 
		ctrPow17(vint, v17,ctrcentr[0]); 
		
		TestEqual(uint, u17, uF); 
		TestEqual(vint, v17, vF); 
		
		// depreciated
		//CNOT(uH[0], u17.reg[30]); 			
		//CNOT(vH[0], v17.reg[30]); 
		
		Toffoli(uH[0], u17.reg[30], ctrcentr[0]); 	
		Toffoli(vH[0], v17.reg[30], ctrcentr[0]); 	
		
		ctrMOD3(u17, u3, ctrcentr[0]); 
		ctrMOD3(v17, v3, ctrcentr[0]); 
		
		
		
		// depreciated
		//if(evaluteToBool(uF) && evaluateToBool(vF))
		Toffoli(uvF[0], uF[0], vF[0]);
		
			/** location 1 is when ctrcentr[0] is 1 and uvF[0] = 1 **/ 
			Toffoli(ctrcentr[1], ctrcentr[0], uvF[0]); 		
			ctrONE(edge[0], ctrcentr[1]);
			
			
			// location 2 is OR value of uF ad vF
			CNOT(ctrcentr[2], uF[0]); 
			CNOT(ctrcentr[2], vF[0]); 	
			equalquInt2(u3, v3, equalbit[0]); 
			
			// location 3 is AND value of location 2 and equalbit
			Toffoli(ctrcentr[3], ctrcentr[2],equalbit[0]); 
			// location 4 is AND value of location 3 and ctrcentr[0]
			Toffoli(ctrcentr[4], ctrcentr[3],equalbit[0]); 				
			ctrONE(edge[0],ctrcentr[4] ); 
			
			// location 6 is AND value of location 2 and ctrcentr[0] and NOT equabit[0]
			Toffoli(ctrcentr[5],ctrcentr[2],X(equalbit[0])); 
			Toffoli(ctrcentr[6],ctrcentr[5],ctrcentr[0]); 
			
			// restore to its true value 
			X(equalbit[0]); 
			ctrZERO(edge[0], ctrcentr[6]); 
		
			Toffoli(equalbit[1], uH[0], vH[0]); 
			
			// location 7 is "NOT equalbit[0]" AND "NOT equalbit[1]"
			Toffoli(ctrcentr[7],X(equalbit[1]),X(equalbit[0])); 
			
			// restore to its true value 
			X(equalbit[0]); 
			X(equalbit[1]); 
			
			// location 8 is uF is 0 and vF is 0 
			Toffoli(ctrcentr[8], X(uF[0]), X(vF[0]));
			
			// restore value 
			X(uF[0]); 
			X(vF[0]);
			
			// location 9 is location 8 AND location 0
			Toffoli(ctrcentr[9], ctrcentr[0], ctrcentr[8]);
			
			// location 10 is location 9 AND location 7
			Toffoli(ctrcentr[10], ctrcentr[9], ctrcentr[7]);
			ONE(edge[0], ctrcentr[10]); 
}
 

/**************************************************************
*	Algorithm O-2: ConvertNODE
*	Para: u: an quNode of size n 
*	      unit: quInt (actually also of type quNode) 	
*		  int: hn   
**************************************************************/
module ConvertNode(quNode u, quInt unit, int hn) 		
{														
	quInt w; 		
	int i = 0; 
	int j = 0; 
	
	// Just copying and initializing the values of array w
	for( i = 0; i < 31; i++)							
	{
		if(i < n)
		{
			ZERO(w.reg[i]); 							
			CNOT(w.reg[i], u.reg[i]);
		}
		
		else
			ZERO(w.reg[i]);  
	}
	
	SUB(w, hn, unit); 
)
 

/**************************************************************
*	Algorithm O-3: TestEqual(quInt x, quInt y, qreg t[1])
*	Para: x: quInt
*		  y: quInt
*		  t: qreg 
*	     Return:     
**************************************************************/
module TestEqual(quInt x, quInt y, qreg t[1]) 		
{	
	qreg dum[31]; 
	qreg dum2[31]; 												
	
	int i = 0;
	int j = 0;  
	
	for(i = 0; i < 31; i ++)			
	{
		Toffoli(dum[i], x.reg[i], y.reg[i]); 
	}
	
	Toffoli(dum2[0], dum[1], dum[0]); 
	for(j = 1; j < 29; j++)
	{
		Toffoli(dum2[j], dum2[j-1], dum[j+1]); 	
	}
	
	
	// store the retore in t[0]
	Toffoli(t[0], dum2[29], dum[30]); 
	
	
	// uncompute
	for(j = 28; j > 0; j--)
	{
		Toffoli(dum2[j], dum2[j-1], dum[j+1]); 
	}
	
		Toffoli(dum2[0], dum[1], dum[0]); 
		
	for(i = 0; i < 31; i ++)			
	{
		Toffoli(dum[i], x.reg[i], y.reg[i]); 
	}
}

/**************************************************************
*	Algorithm O-4: Pow17(quInt x, quInt x17)
*	Para: x: quInt
*		  y: quInt
*		  t: qreg 
*	     Return:     
**************************************************************/
module Pow17(quInt x, quInt x17)
{
	quInt w; 
	
	MUL(x,x,x17);
	MUL(x17, x17, w); 
	MUL(w,w,x17); 
	MUL(x17, x17, w); 
	MUL(w,x,x17); 
}


/**************************************************************
*	Algorithm O-4-1: ctrPow17(quInt x, quInt x17, qreg t[1])
**************************************************************/
module ctrPow17(quInt x, quInt x17, qreg t[1])
{
	quInt w; 
	
	ctrMUL(x,x,x17, t[0]);
	ctrMUL(x17, x17, w, t[0]); 
	ctrMUL(w,w,x17, t[0]); 
	ctrMUL(x17, x17, w, t[0]); 
	ctrMUL(w,x,x17, t[0]); 
}
 

/**************************************************************
*	Algorithm O-5: MOD3(quInt x, quInt2 m)
*	Para: x: quInt  (array of size 31)
*		  m: quInt2 (array of size 2)
*	     Return:     
**************************************************************/
module MOD3(quInt x, quInt2 m)
{
	
	int j = 0; 
	quInt3 s3;
	quInt5 s5;
	qreg tmp[1]; 
	qreg tmp2[1];
	qreg dum[1];
	
	
	 
	
	for(j = 0; j < 5; j++)
	{
		if(j == 4)
			ZERO(s5.reg[j]);
		else
			ONE(s5.reg[j]); 
	} 
	
	for(j = 0; j< 30; j++) 				
	{
		// s5++
		// depreciated 
		//if(evaluateToBool(x.reg[j]))
		//{
			ZERO(tmp[0]); 
			ZERO(tmp2[0]);
			ctrbitADD(s5.reg[2], s5.reg[3], tmp[0], x.reg[j]); 
			ctrbitADD(s5.reg[1], tmp[0], tmp2[0], x.reg[j]); 
			ZERO(tmp[0]); 
			ctrbitADD(s5.reg[0], tmp2[0], tmp[0], x.reg[j]); 
			ZERO(tmp2[0]); 
			ctrbitADD(s5.reg[4], tmp[0], tmp2[0], x.reg[j]); 
			Toffoli(ZERO(s5.reg[4]), tmp2[0], x.reg[j]); 
			
			ZERO(tmp[0]); 
			ZERO(tmp2[0]); 
			ctrbitADD(s5.reg[1],s5.reg[2], tmp[0], x.reg[j]); 
			ctrbitADD(s5.reg[0], tmp[0], tmp2[0], x.reg[j]); 
			ZERO(tmp[0]); 
			ctrbitADD(s5.reg[3], tmp2[0], tmp[0], x.reg[j]); 
			Toffoli(ZERO(s5.reg[3]), tmp[0], x.reg[j]); 
			
			ZERO(tmp[0]); 
			ZERO(tmp2[0]);
			ctrbitADD(s5.reg[0], s5.reg[1], tmp[0], x.reg[j]); 
			ctrbitADD(s5.reg[2], tmp[0], tmp2[0], x.reg[j]); 			 
			Toffoli(ZERO(s5.reg[2]), tmp2[0], x.reg[j]); 
			
			ZERO(tmp[0]); 
			ZERO(tmp2[0]);
			ctrbitADD(s5.reg[1], s5.reg[0], tmp[0], x.reg[j]); 
			Toffoli(ZERO(s5.reg[1]), tmp, x.reg[j]); 
			
			ZERO(tmp[0]); 
			ctrbitADD(s5.reg[0], ONE(dum[0]), tmp[0], x.reg[j]); 
			Toffoli(ZERO(s5.reg[0]), tmp[0], x.reg[j]); 
		//}				
		
		// s5--
		// depreciated 
		//if(evaluateToBool(ctrbit[0]))				
		//{
			
			 ZERO(tmp[0]); 
			 ctrbitADD(s5.reg[0], dum[0], tmp[0], x.reg[j+1]);
			 Toffoli(ZERO(s5.reg[0]), tmp[0], x.reg[j+1]); 
			 
			 ZERO(tmp[0]); 
			 ctrbitADD(s5.reg[1], s5.reg[0], tmp[0], x.reg[j+1]);
			 Toffoli(ZERO(s5.reg[1]), tmp[0], x.reg[j+1]); 
			 
			 ZERO(tmp[0]); 
			 ctrbitADD(s5.reg[0], s5.reg[1], tmp[0], x.reg[j+1]);
			 ctrbitADD(s5.reg[2], tmp[0], tmp2[0], x.reg[j+1]); 
			 Toffoli(ZERO(s5.reg[2]), tmp2[0], x.reg[j+1]); 
			 
			 ZERO(tmp[0]); 
			 ZERO(tmp2[0]);
			 ctrbitADD(s5.reg[1],s5.reg[2], tmp[0], x.reg[j+1]);
			 ctrbitADD(s5.reg[0], tmp[0], tmp2[0], x.reg[j+1]); 
			 ZERO(tmp[0]);
			 ctrbitADD(s5.reg[3], tmp2[0], tmp[0], x.reg[j+1]); 
			 Toffoli(ZERO(s5.reg[3]), tmp[0], x.reg[j+1]); 
			 
			 
			 ZERO(tmp[0]); 
			 ZERO(tmp2[0]);
			 ctrbitADD(s5.reg[2], s5.reg[3], tmp[0], x.reg[j+1]); 
			 ctrbitADD(s5.reg[1], tmp[0], tmp2[0], x.reg[j+1]); 
			 ZERO(tmp[0]); 
			 ctrbitADD(s5.reg[0], tmp2[0], tmp[0], x.reg[j+1]); 
			 ZERO(tmp2[0]); 
			 ctrbitADD(s5.reg[4], tmp[0], tmp2[0], x.reg[j+1]); 
			 Toffoli(ZERO(s5.reg[4]), tmp2[0], x.reg[j+1]);  
		//}
		
		// two steps in one loop
		j++; 
	}
	
	
	// 0 <= s5<= 30; m = s5 mod 3
	// set s3 to 3 and similary reduce s5
	ONE(s3.reg[0]);  
	ONE(s3.reg[1]); 
	ZERO(s3.reg[2]); 
	
	for(j = 0; j < 4)					
	{
		// depreciated 
		//if(evaluateToBool(s5.reg[j]))				
		//{
			ZERO(tmp[0]); 
			ZERO(tmp2[0]);
			ctrbitAND(s3.reg[0], s3.reg[1], tmp[0], s5.reg[j]); 
			ctrbitADD(s3.reg[2], tmp[0], tmp2[0],s5.reg[j]); 
			Toffoli(ZERO(s3.reg[2]), tmp2[0], s5.reg[j]);
			
			ZERO(tmp[0]); 
			ZERO(tmp2[0]);
			  
			ctrbitADD(s3.reg[1], s3.reg[0], tmp[0], s5.reg[j]); 
			Toffoli(ZERO(s3.reg[1]), tmp[0], s5.reg[j]);  
			
			ZERO(tmp[0]); 
			ctrbitADD(s3.reg[0], ONE(dum), tmp[0], s5.reg[j]); 	
			Toffoli(ZERO(s3.reg[0]), tmp[0], s5.reg[j]); 		
		//}
		
		
		// Note: I changed from s3 to s5 in the if statement because if s3, it would be out of index bound 
		// It should be a typo in the GFI document
		// depreciated 
		//if(evaluateToBool(s5.reg[j+1]))			
		//{
		
			ZERO(tmp[0]); 
			ZERO(tmp2[0]);
			
			ctrbitADD(s3.reg[0], dum[0], tmp[0], s5.reg[j+1]); 
			Toffoli(ZERO(s3.reg[0]), tmp[0], s5.reg[j+1]); 
			 
			ZERO(tmp[0]); 
			ctrbitADD(s3.reg[1], s3.reg[0], tmp[0], s5.reg[j+1]); 
			Toffoli(ZERO(s3.reg[1]), tmp[0], s5.reg[j+1]); 
			
			ZERO(tmp[0]); 
			ctrbitAND(s3.reg[0], s3.reg[1], tmp[0], s5.reg[j+1]);
			ctrbitADD(s3.reg[2],tmp[0], tmp2[0], s5.reg[j+1]); 
			Toffoli(ZERO(s3.reg[2]), tmp2[0], s5.reg[j+1]);   
		//}
		
		// 2 steps in a loop
		j++; 
	}
	
	
	ZERO(tmp[0]); 
	ZERO(tmp2[0]);
	// depreciated 
	//if(evaluateToBool(s5.reg[4]))
	//{
			ctrbitAND(s3.reg[0], s3.reg[1], tmp[0], s5.reg[4]); 
			ctrbitADD(s3.reg[2], tmp[0], tmp2[0], s5.reg[4]); 
			Toffoli(ZERO(s3.reg[2]), tmp2[0], s5.reg[4]); 
			
			ctrbitADD(s3.reg[1], s3.reg[0], tmp[0], s5.reg[4]); 
			Toffoli(ZERO(s3.reg[1]), tmp[0], s5.reg[4]); 
			
			ctrbitADD(s3.reg[0], dum[0], tmp[0], s5.reg[4]); 
			Toffoli(ZERO(s3.reg[0]), tmp[0], s5.reg[4]); 
	//}
	
	ZERO(tmp[0]); 
	ZERO(tmp2[0]);
	// 1 <= s3 <=6
	//if(evaluateToBool(s3.reg[2]))
	//{
		ctrbittADD(s3.reg[0], dum[0], tmp[0], s3.reg[2]); 
		Toffoli(ZERO(s3.reg[0]), tmp[0], s3.reg[2]); 
		
		// Note: I changed from s3.reg[1] to s3.reg[0], seems like a typo in GFI document
		ctrbitADD(s3.reg[0], dum[0], tmp[0], s3.reg[2]); 
		ctrbitADD(s3.reg[1], tmp[0], tmp2[0], s3.reg[2]); 
		Toffoli(ZERO(s3.reg[1]), tmp2[0], s3.reg[2]); 		
	//}
	
	
	CNOT(ZERO(m.reg[0]), s3.reg[0]); 
	CNOT(ZERO(m.reg[1]), s3.reg[1]); 
}



/**************************************************************
*	Algorithm O-5-1: ctrMOD3(quInt x, quInt2 m, qreg t[1])
*	Para: x: quInt  (array of size 31)
*		  m: quInt2 (array of size 2)
*	     Return:     
**************************************************************/
module ctrMOD3(quInt x, quInt2 m, qreg t[1])
{
	
	int j = 0; 
	quInt3 s3;
	quInt5 s5;
	qreg tmp[1]; 
	qreg tmp2[1];
	qreg dum[1];
	qreg ctrbit[1]; 
	
	
	 
	
	for(j = 0; j < 4; j++)
	{
		ctrONE(s5.reg[j], t[0]); 
	} 
	
	ctrZERO(s5.reg[4], t[0]);
	
	
	for(j = 0; j< 30; j++) 				
	{
		// s5++
		// depreciated 
		//if(evaluateToBool(x.reg[j]))
		//{
			ZERO(tmp[0]); 
			ZERO(tmp2[0]);
			ZERO(ctrbit[0]); 
			Toffoli(ctrbit[0], x.reg[j], t[0]); 
			ctrbitADD(s5.reg[2], s5.reg[3], tmp[0], ctrbit[0]); 
			ctrbitADD(s5.reg[1], tmp[0], tmp2[0], ctrbit[0]); 
			ZERO(tmp[0]); 
			ctrbitADD(s5.reg[0], tmp2[0], tmp[0], ctrbit[0]); 
			ZERO(tmp2[0]); 
			ctrbitADD(s5.reg[4], tmp[0], tmp2[0], ctrbit[0]); 
			Toffoli(ZERO(s5.reg[4]), tmp2[0], ctrbit[0]); 
			
			ZERO(tmp[0]); 
			ZERO(tmp2[0]); 
			ctrbitADD(s5.reg[1],s5.reg[2], tmp[0], ctrbit[0]); 
			ctrbitADD(s5.reg[0], tmp[0], tmp2[0], ctrbit[0]); 
			ZERO(tmp[0]); 
			ctrbitADD(s5.reg[3], tmp2[0], tmp[0], ctrbit[0]); 
			Toffoli(ZERO(s5.reg[3]), tmp[0], ctrbit[0]); 
			
			ZERO(tmp[0]); 
			ZERO(tmp2[0]);
			ctrbitADD(s5.reg[0], s5.reg[1], tmp[0], ctrbit[0]); 
			ctrbitADD(s5.reg[2], tmp[0], tmp2[0], ctrbit[0]); 			 
			Toffoli(ZERO(s5.reg[2]), tmp2[0], ctrbit[0]); 
			
			ZERO(tmp[0]); 
			ZERO(tmp2[0]);
			ctrbitADD(s5.reg[1], s5.reg[0], tmp[0], ctrbit[0]); 
			Toffoli(ZERO(s5.reg[1]), tmp, ctrbit[0]); 
			
			ZERO(tmp[0]); 
			ctrbitADD(s5.reg[0], ONE(dum[0]), tmp[0], ctrbit[0]); 
			Toffoli(ZERO(s5.reg[0]), tmp[0], ctrbit[0]); 
		//}				
		
		// s5--
		// depreciated 
		//if(evaluateToBool(x.reg[j+1]))				
		//{
			
			 ZERO(tmp[0]); 
			 ZERO(ctrbit[0]); 
			 Toffoli(ctrbit[0], x.reg[j+1], t[0]); 
			 ctrbitADD(s5.reg[0], dum[0], tmp[0], ctrbit[0]);
			 Toffoli(ZERO(s5.reg[0]), tmp[0], ctrbit[0]); 
			 
			 ZERO(tmp[0]); 
			 ctrbitADD(s5.reg[1], s5.reg[0], tmp[0], ctrbit[0]);
			 Toffoli(ZERO(s5.reg[1]), tmp[0], ctrbit[0]); 
			 
			 ZERO(tmp[0]); 
			 ctrbitADD(s5.reg[0], s5.reg[1], tmp[0], ctrbit[0]);
			 ctrbitADD(s5.reg[2], tmp[0], tmp2[0], ctrbit[0]); 
			 Toffoli(ZERO(s5.reg[2]), tmp2[0], ctrbit[0]); 
			 
			 ZERO(tmp[0]); 
			 ZERO(tmp2[0]);
			 ctrbitADD(s5.reg[1],s5.reg[2], tmp[0], ctrbit[0]);
			 ctrbitADD(s5.reg[0], tmp[0], tmp2[0], ctrbit[0]); 
			 ZERO(tmp[0]);
			 ctrbitADD(s5.reg[3], tmp2[0], tmp[0], ctrbit[0]); 
			 Toffoli(ZERO(s5.reg[3]), tmp[0], ctrbit[0]); 
			 
			 
			 ZERO(tmp[0]); 
			 ZERO(tmp2[0]);
			 ctrbitADD(s5.reg[2], s5.reg[3], tmp[0], ctrbit[0]); 
			 ctrbitADD(s5.reg[1], tmp[0], tmp2[0], ctrbit[0]); 
			 ZERO(tmp[0]); 
			 ctrbitADD(s5.reg[0], tmp2[0], tmp[0], ctrbit[0]); 
			 ZERO(tmp2[0]); 
			 ctrbitADD(s5.reg[4], tmp[0], tmp2[0], ctrbit[0]); 
			 Toffoli(ZERO(s5.reg[4]), tmp2[0], ctrbit[0]);  
		//}
		
		// two steps in one loop
		j++; 
	}
	
	
	// 0 <= s5<= 30; m = s5 mod 3
	// set s3 to 3 and similary reduce s5
	
	ONE(s3.reg[0]);  
	ONE(s3.reg[1]); 
	ZERO(s3.reg[2]); 
	
	for(j = 0; j < 4)					
	{
		// depreciated 
		//if(evaluateToBool(s5.reg[j]))				
		//{
			ZERO(tmp[0]); 
			ZERO(tmp2[0]);
			ZERO(ctrbit[0]); 
			Toffoli(ctrbit[0], s5.reg[j], t[0]); 
			ctrbitAND(s3.reg[0], s3.reg[1], tmp[0], ctrbit[0]); 
			ctrbitADD(s3.reg[2], tmp[0], tmp2[0],ctrbit[0]); 
			Toffoli(ZERO(s3.reg[2]), tmp2[0], ctrbit[0]);
			
			ZERO(tmp[0]); 
			ZERO(tmp2[0]);
			  
			ctrbitADD(s3.reg[1], s3.reg[0], tmp[0], ctrbit[0]); 
			Toffoli(ZERO(s3.reg[1]), tmp[0], ctrbit[0]);  
			
			ZERO(tmp[0]); 
			ctrbitADD(s3.reg[0], ONE(dum[0]), tmp[0], ctrbit[0]); 	
			Toffoli(ZERO(s3.reg[0]), tmp[0], ctrbit[0]); 		
		//}
		
		
		// Note: I changed from s3 to s5 in the if statement because if s3, it would be out of index bound 
		// It should be a typo in the GFI document
		// depreciated 
		//if(evaluateToBool(s5.reg[j+1]))			
		//{
		
			ZERO(tmp[0]); 
			ZERO(tmp2[0]);
			ZERO(ctrbit[0]); 
			Toffoli(ctrbit[0], s5.reg[j+1], t[0]); 
			ctrbitADD(s3.reg[0], dum[0], tmp[0], ctrbit[0]); 
			Toffoli(ZERO(s3.reg[0]), tmp[0], ctrbit[0]); 
			 
			ZERO(tmp[0]); 
			ctrbitADD(s3.reg[1], s3.reg[0], tmp[0], ctrbit[0]); 
			Toffoli(ZERO(s3.reg[1]), tmp[0], ctrbit[0]); 
			
			ZERO(tmp[0]); 
			ctrbitAND(s3.reg[0], s3.reg[1], tmp[0], ctrbit[0]);
			ctrbitADD(s3.reg[2],tmp[0], tmp2[0], ctrbit[0]); 
			Toffoli(ZERO(s3.reg[2]), tmp2[0], ctrbit[0]);   
		//}
		
		// 2 steps in a loop
		j++; 
	}
	
	
	ZERO(tmp[0]); 
	ZERO(tmp2[0]);
	ZERO(ctrbit[0]); 
	Toffoli(ctrbit[0], s5.reg[4], t[0]); 
	// depreciated 
	//if(evaluateToBool(s5.reg[4]))
	//{
			ctrbitAND(s3.reg[0], s3.reg[1], tmp[0], ctrbit[0]); 
			ctrbitADD(s3.reg[2], tmp[0], tmp2[0], ctrbit[0]); 
			Toffoli(ZERO(s3.reg[2]), tmp2[0], ctrbit[0]); 
			
			ctrbitADD(s3.reg[1], s3.reg[0], tmp[0], ctrbit[0]); 
			Toffoli(ZERO(s3.reg[1]), tmp[0], ctrbit[0]); 
			
			ctrbitADD(s3.reg[0], dum[0], tmp[0], ctrbit[0]); 
			Toffoli(ZERO(s3.reg[0]), tmp[0], ctrbit[0]); 
	//}
	
	
	// 1 <= s3 <=6
	//if(evaluateToBool(s3.reg[2]))
	//{
		ZERO(tmp[0]); 
		ZERO(tmp2[0]);
		ZERO(ctrbit[0]); 
		Toffoli(ctrbit[0], s3.reg[2], t[0]);
		ctrbittADD(s3.reg[0], dum[0], tmp[0], ctrbit[0]); 
		Toffoli(ZERO(s3.reg[0]), tmp[0], ctrbit[0]); 
		
		// Note: I changed from s3.reg[1] to s3.reg[0], seems like a typo in GFI document
		ctrbitADD(s3.reg[0], dum[0], tmp[0], ctrbit[0]); 
		ctrbitADD(s3.reg[1], tmp[0], tmp2[0], ctrbit[0]); 
		Toffoli(ZERO(s3.reg[1]), tmp2[0], ctrbit[0]); 		
	//}
	
	
	CNOT(ZERO(m.reg[0]), s3.reg[0]); 
	CNOT(ZERO(m.reg[1]), s3.reg[1]); 
}
 

/**************************************************************
*	Algorithm O-6: SUB(quInt x, int y, quInt d)
*	Para: x: quInt
*		  y: qnt
*		  s: quInt 
*	     Return:     
**************************************************************/
module SUB(quInt x, int y, quInt d)
{
	qreg c1[32]; 
	qreg c2[32]; 
	
	qreg tmp[1]; 
	qreg tmp2[1];
	qreg dum[1]; 
	
	quInt d1; 
	
	int j = 0; 
	
	ZERO(c1[0]); 
	
	for(j = 0; j < 31; j++)
	{
		bitADD(y.reg[j], ONE(dum[0]), tmp[0]); 
		bitAND(x.reg[j], tmp[0], c1[j+1]); 
		
		bitAND(x.reg[j], c1[j], tmp[0]); 
		bitADD(c1[j+1], tmp[0], tmp2[0]); 
		CNOT(ZERO(c1[j+1]), tmp2[0]); 
		
		bitADD(y.reg[j], dum, tmp[0]); 
		bitAND(tmp[0], c1[j], tmp2[0]); 
		bitADD(c1[j+1], tmp2[0], tmp[0]);  
		CNOT(ZERO(c1[j+1]), tmp[0]); 
		
		bitADD(dum, c1[j], tmp[0]); 
		bitADD(y.reg[j],tmp[0], tmp2[0]); 
		bitADD(x.reg[j], tmp2[0], d1.reg[j]);  		
	}
	
	CNOT(c2[0], c1[31]); 
	
	for(j = 0; j < 31; j++)
	{
		bitAND(d1.reg[j], c2[j], c2[j+1]);
		bitADD(d1.reg[j], c2[j], tmp[0]); 		
		CNOT(ZERO(d.reg[j]), tmp[0]);
	}
	
	bitADD(d.reg[0], c2[31], tmp[0]); 
	CNOT(ZERO(d.reg[0]), tmp[0]); 
}
 

/**************************************************************
*	Algorithm O-7: ADD(quInt x, quInt y, quInt s)
*	Para: x: quInt
*		  y: quInt
*		  s: quInt 
**************************************************************/
module ADD(quInt x, quInt y, quInt s)
{
	qreg c1[32]; 
	qreg c2[32]; 
	qreg tmp[1]; 
	qreg tmp2[1];
	
	quInt s1; 
	
	int j = 0; 
	
	ZERO(c1[0]); 
	
	for(j = 0; j < 31; j++)
	{
		bitAND(x.reg[j], y.reg[j], c1[j+1]); 
		bitAND(x.reg[j], c1[j], tmp[0]); 
		bitADD(c1[j+1], tmp[0], tmp2[0]); 
		CNOT(ZERO(c1[j+1]), tmp2[0]);
		
		bitAND(y.reg[j], c1[j], tmp[0]); 
		bitADD(c1[j+1], tmp[0], tmp2[0]); 
		CNOT(ZERO(c1[j+1]), tmp2[0]);
		
		bitADD(y.reg[j], c1[j], tmp[0]); 
		bitADD(x.reg[j],tmp[0], tmp2[0]); 
		CNOT(s1[j], tmp2[0]); 
	}
	
	CNOT(c2[0], c1[31]); 
	
	for(j = 0; j < 31; j++)
	{
		bitAND(s1.reg[j], c2[j], c2[j+1]); 
		bitADD(s1.reg[j], c2[j], s.reg[j]);
	}
	
	bitADD(s.reg[1],  c2[31], tmp[0]); 
	CNOT(ZERO(s.reg[1]), tmp[0]); 
}
 
/**************************************************************
*	Algorithm O-7-1: ctrADD(quInt x, quInt y, quInt s, qreg t[1])
**************************************************************/
module ctrADD(quInt x, quInt y, quInt s, qreg t[1])
{
	qreg c1[32]; 
	qreg c2[32]; 
	qreg tmp[1]; 
	qreg tmp2[1];
	
	quInt s1; 
	
	int j = 0; 
	
	
	// no need to use control bit on this operation
	ZERO(c1[0]); 
	
	for(j = 0; j < 31; j++)
	{
		ctrbitAND(x.reg[j], y.reg[j], c1[j+1], t[0]); 
		ctrbitAND(x.reg[j], c1[j], tmp[0],t[0]); 
		ctrbitADD(c1[j+1], tmp[0], tmp2[0], t[0]); 
		Toffoli(ZERO(c1[j+1]), tmp2[0], t[0]);
		
		ctrbitAND(y.reg[j], c1[j], tmp[0], t[0]); 
		ctrbitADD(c1[j+1], tmp[0], tmp2[0], t[0]); 
		Toffoli(ZERO(c1[j+1]), tmp2[0], t[0]);
		
		ctrbitADD(y.reg[j], c1[j], tmp[0], t[0]); 
		ctrbitADD(x.reg[j],tmp[0], tmp2[0], t[0]); 
		Toffoli(s1[j], tmp2[0], t[0]); 
	}
	
	Toffoli(c2[0], c1[31], t[0]); 
	
	for(j = 0; j < 31; j++)
	{
		ctrbitAND(s1.reg[j], c2[j], c2[j+1], t[0]); 
		ctrbitADD(s1.reg[j], c2[j], s.reg[j], t[0]);
	}
	
	ctrbitADD(s.reg[1],  c2[31], tmp[0], t[0]); 
	Toffoli(ZERO(s.reg[1]), tmp[0], t[0]); 
}

/**************************************************************
*	Algorithm O-8: MUL(quInt x, quInt y, quInt p)
*	Para: x: quInt
*		  y: quInt
*		  p: quInt 
**************************************************************/
module MUL(quInt x, quInt y, quInt p)
{
	quInt tmp;
	quInt wrk; 
	
	qreg swp; 	
	
	int j = 0; 
	int k = 0; 
	
	for(j = 0; j < 31; j++)			
	{
		ZERO(p.reg[j]); 
		CNOT(tmp.reg[j], y.reg[j]); 
	}
	
	for(k = 0; k < 31; k++)
	{
		if(!(evaluateToBool(x.reg[k]))
		{
			ADD(p, tmp, wrk); 
			for(j = 0; j < 31; j++)
			{
				ZERO(p.reg[j]); 
				CNOT(p.reg[j], wrk.reg[j]); 
			}
		}
		
		for(j = 0; j < 30; j++)
		{
			CNOT(swp, tmp.reg[30]); 
			
			ZERO(tmp.reg[30]); 
			CNOT(tmp.reg[30], tmp.reg[j]); 
			
			ZERO(tmp.reg[j]); 
			CNOT(tmp.reg[j], swp); 
		}
	}
}
 
/**************************************************************
*	Algorithm O-8-1: ctrMUL(quInt x, quInt y, quInt p, qreg t[1])
**************************************************************/
module ctrMUL(quInt x, quInt y, quInt p, qreg t[1])
{
	quInt tmp;
	quInt wrk; 
	
	qreg swp; 	
	
	int j = 0; 
	int k = 0; 
	
	for(j = 0; j < 31; j++)			
	{
		ctrZERO(p.reg[j], t[0]); 
		Toffoli(tmp.reg[j], y.reg[j], t[0]); 
	}
	
	for(k = 0; k < 31; k++)
	{
		
			ctrADD(p, tmp, wrk, t[0]); 
			for(j = 0; j < 31; j++)
			{
				ctrZERO(p.reg[j], t[0]); 
				Toffoli(p.reg[j], wrk.reg[j], t[0]); 
			}
	
		
		for(j = 0; j < 30; j++)
		{
			Toffoli(swp, tmp.reg[30], t[0]); 
			
			ctrZERO(tmp.reg[30], t[0]); 
			Toffoli(tmp.reg[30], tmp.reg[j], t[0]); 
			
			ctrZERO(tmp.reg[j], t[0]); 
			Toffoli(tmp.reg[j], swp, t[0]); 
		}
	}
}
 
